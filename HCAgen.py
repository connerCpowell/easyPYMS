from scipy.spatial import distance_matrix
from scipy.cluster.hierarchy import dendrogram, linkage
from matplotlib import pyplot as plt
from collections import OrderedDict
import argparse
import datetime

def get_data(line, num):
    """
    Parses an array by splitting & stripping the commas

    @param line: Array of numbers
    @param num: individual number in array
    @return: each number in the array
    """
    try:
        x = float(line.split(',')[num].strip())
        return x
    except:
        return 0


def dictGen(inFile):
    """
    Parses the area.csv file row by row. After stepping over the first column, it uses each column header as a
    dictionary key and all subsequent items in the column are stored as values. A list of the .cdf file name is also
    generated.

    @param inFile: area.csv file generated by fullAlign.py
    @return: dm_list, A list of list of area values of each aligned .cdf file ordered by retention time
    @return: names, list of all the column headers which are the .cdf file names
    """

    with open(inFile, 'r') as f:
        i = 0
        species_dict = OrderedDict()
        list_o_species = []
        total = 0
        for line in f:
            num = line.count(',')
            if i != 0:
                for j in range(num):
                    species_dict[list_o_species[j]].append(get_data(line, j + 1))
            else:
                for i in range(num):
                    j = i + 1
                    species_dict[line.split(',')[j].strip()] = []
                    x = line.split(',')[j].strip()
                    list_o_species.append(x)
            i = 1

    dm_list = []
    names = []
    x = 0
    for val in species_dict:
        if x == 0:
            x += 1
        else:
            dm_list.append(species_dict[val])
            names.append(val)
    return dm_list, names


def nameClean(names):
    """
    Removes the '.cdf' from the tail of the .cdf file name and replaces dashes(-) with periods(.)
    This cleaning is done to facilitate branch naming in the HCA visualization

    @param names: list of .cdf file names extracted using the dictGen() method
    @return: name2, an abbreviated version of the .cdf file name
    """

    name2 = []
    for n in names:
        print('n=', n)
        if str(n).endswith('.cdf"'):
            na = n.strip('.cdf"')
            na3 = na.replace("-", ".")
            print('name3=', na3)
            name2.append(str(na3))
        else:
            print('no')

    return name2


def distMat(dm_list, names, outfile, nametag, distanceM):
    """
    Creates a symmetric distance matrix the uses the distance matrix to generate a HCA tree diagram using
    scipy packages

    @param dm_list: A list area values of each aligned .cdf file ordered by retention time generated by dictGen()
    @param names: list of abbreviated .cdf file names
    @param outfile: name of output directory for the HCA.svg to be stored
    @param nametag: Unique string used to identify the HCA.svg, default is the date
    @param distanceM: Distance method to be used in the linkage method
    @return:
    """

    d = distance_matrix(dm_list, dm_list)
    linked = linkage(d, distanceM)

    plt.figure(figsize=(10, 10))
    dendrogram(linked,
               orientation='top',
               labels=names,
               distance_sort='descending',
               show_leaf_counts=True)

    print('svg file:', str(outfile + nametag+'_'+distanceM+'_'+'HCA.svg'))
    plt.savefig(outfile + nametag+'_'+distanceM+'_'+'HCA.svg', format='svg')
    plt.show()


def main():

    parser = argparse.ArgumentParser(description="Hierarchical cluster analysis build from the fullAlign.py *area.csv ")

    parser.add_argument("-c",
                        action="store",
                        dest="csvf",
                        nargs="?",
                        type=str,
                        default="/workdir2/cpowell/rasp2018/",
                        help="Location of .csv file to be analyzed; Default= '/tmp/' ")

    parser.add_argument("-o",
                        action="store",
                        dest="opn",
                        nargs="?",
                        type=str,
                        default="/tmp/",
                        help="location to store the HCA .png output file")

    parser.add_argument("-n",
                        action="store",
                        dest="nameTag",
                        nargs="?",
                        type=str,
                        default=str(datetime.datetime.now()),
                        help="identifier text to be used a nametag; Default= '*current datetime*' ")

    parser.add_argument("-d",
                        action="store",
                        choices=['single', 'complete', 'average', 'weighted', 'centroid', 'median', 'ward'],
                        type=str,
                        default="ward",
                        help="Distance method to be used to build matrix ; Default='ward' ",
                        dest='distance')

    args = parser.parse_args()
    print(args)

    dm_list, names = dictGen(args.csvf)

    nameC = nameClean(names)

    distMat(dm_list, nameC, args.opn, args.nameTag, args.distance)
    
if __name__ == "__main__":
    main()